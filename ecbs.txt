# traffic_manager.py 发现的问题和修复

"""
主要发现的问题：
1. OptimizedTrafficManager 类中的一些方法实现不完整
2. _select_agent_for_replanning 等方法缺失
3. _replan_with_constraints 等方法缺失
4. _generate_spatial_constraints 等方法缺失
"""

# 在 OptimizedTrafficManager 类中添加缺失的方法：

class OptimizedTrafficManager:
    """优化的交通管理器 - 修复版本"""
    
    # ... 其他代码保持不变 ...
    
    # 添加缺失的方法实现：
    
    def _select_agent_for_replanning(self, conflict, paths):
        """选择需要重新规划的智能体"""
        agent1, agent2 = conflict.agent1, conflict.agent2
        
        # 优先重新规划优先级较低的智能体
        if agent1 in paths and agent2 in paths:
            path1_length = len(paths[agent1])
            path2_length = len(paths[agent2])
            
            # 选择路径较短的智能体重新规划（影响较小）
            if path1_length <= path2_length:
                return agent1
            else:
                return agent2
        
        return agent1 if agent1 in paths else agent2
    
    def _generate_spatial_constraints(self, conflict, paths):
        """生成空间约束"""
        constraints = []
        
        if conflict.conflict_type == 'vertex':
            # 顶点约束：在特定时间不能占用特定位置
            constraint = SmartConstraint(
                agent_id=conflict.agent1,
                constraint_type='vertex',
                location=conflict.location,
                time_step=conflict.time_step,
                priority=2
            )
            constraints.append(constraint)
        
        elif conflict.conflict_type == 'edge':
            # 边约束：在特定时间不能使用特定边
            constraint = SmartConstraint(
                agent_id=conflict.agent1,
                constraint_type='edge',
                location=conflict.location,
                time_step=conflict.time_step,
                priority=2
            )
            constraints.append(constraint)
        
        return constraints
    
    def _replan_with_constraints(self, agent_id, start, goal, constraints):
        """在约束条件下重新规划路径"""
        if not self.path_planner:
            return None
        
        try:
            # 简化实现：多次尝试规划，每次增加迭代次数
            for attempt in range(3):
                max_iterations = 3000 + attempt * 1000
                
                # 使用路径规划器重新规划
                result = self.path_planner.plan_path(
                    agent_id, start, goal, use_backbone=True, check_conflicts=False
                )
                
                if result:
                    if isinstance(result, tuple):
                        path, structure = result
                        return path
                    else:
                        return result
        
        except Exception as e:
            print(f"约束重新规划失败: {e}")
        
        return None
    
    def _determine_lower_priority_agent(self, agent1, agent2):
        """确定较低优先级的智能体"""
        # 简化实现：基于ID排序
        return agent1 if agent1 < agent2 else agent2
    
    def _replan_with_interface_avoidance(self, agent, current_path, blocked_interface):
        """规划避开特定接口的路径"""
        if not current_path or len(current_path) < 2:
            return None
        
        start, goal = current_path[0], current_path[-1]
        
        # 使用路径规划器重新规划（简化实现）
        if hasattr(self, 'path_planner') and self.path_planner:
            try:
                result = self.path_planner.plan_path(
                    agent, start, goal, use_backbone=True, check_conflicts=False
                )
                
                if result:
                    return result[0] if isinstance(result, tuple) else result
            
            except Exception as e:
                print(f"接口回避规划失败: {e}")
        
        return None
    
    def _is_path_better(self, new_path, old_path):
        """比较路径质量 - 已在原代码中实现，确保存在"""
        if not new_path or not old_path:
            return bool(new_path)
        
        # 简单的长度比较
        new_length = sum(
            math.sqrt((new_path[i+1][0] - new_path[i][0])**2 + 
                     (new_path[i+1][1] - new_path[i][1])**2)
            for i in range(len(new_path) - 1)
        )
        
        old_length = sum(
            math.sqrt((old_path[i+1][0] - old_path[i][0])**2 + 
                     (old_path[i+1][1] - old_path[i][1])**2)
            for i in range(len(old_path) - 1)
        )
        
        return new_length <= old_length * 1.2


# 修复 EnhancedECBSSolver 类中的缺失方法：

class EnhancedECBSSolver:
    """增强的ECBS求解器 - 修复版本"""
    
    # ... 其他代码保持不变 ...
    
    def _plan_alternative_backbone_path(self, start, goal, agent):
        """规划替代的骨干路径"""
        if not self.backbone_network:
            return None
        
        # 尝试使用不同的骨干路径
        target_type, target_id = self.backbone_network.identify_target_point(goal)
        if not target_type:
            return None
        
        # 获取所有可用路径
        available_paths = self.backbone_network.find_paths_to_target(target_type, target_id)
        
        for path_data in available_paths:
            try:
                # 尝试使用这条骨干路径
                result = self.backbone_network.get_path_from_position_to_target(
                    start, target_type, target_id
                )
                
                if result and result[0]:
                    return result[0]
            
            except Exception:
                continue
        
        return None

# 确保所有导入都正确
import math
import heapq
import time
import numpy as np
from typing import List, Dict, Tuple, Set, Optional, Any
from collections import defaultdict, deque
from dataclasses import dataclass, field
import threading
from concurrent.futures import ThreadPoolExecutor
import weakref；；

# vehicle_scheduler.py 发现的问题和修复

"""
主要发现的问题：
1. OptimizedVehicleScheduler 类名称与SimplifiedVehicleScheduler别名不匹配
2. 一些方法调用可能存在问题
3. 需要确保所有必要的方法都已实现
"""

# 在文件末尾的向后兼容性部分修复：

# 向后兼容性 - 修复别名
VehicleScheduler = OptimizedVehicleScheduler
SimplifiedVehicleScheduler = OptimizedVehicleScheduler  # 这里是正确的
SimplifiedECBSVehicleScheduler = ECBSEnhancedVehicleScheduler

# 为了确保向后兼容，添加一个真正的SimplifiedVehicleScheduler类：

class SimplifiedVehicleScheduler(OptimizedVehicleScheduler):
    """简化版车辆调度器 - 为了向后兼容"""
    
    def __init__(self, env, path_planner=None, backbone_network=None, traffic_manager=None):
        # 注意参数顺序的调整，以匹配原始调用
        super().__init__(env, path_planner, traffic_manager, backbone_network)
        
        # 简化配置
        self.batch_planning = False  # 禁用批量规划
        self.parallel_processing = False  # 禁用并行处理
        self.scheduling_strategy = 'greedy'  # 使用贪心策略
        
        print("初始化简化版车辆调度器")

class SimplifiedECBSVehicleScheduler(ECBSEnhancedVehicleScheduler):
    """简化版ECBS车辆调度器 - 为了向后兼容"""
    
    def __init__(self, env, path_planner=None, traffic_manager=None, backbone_network=None):
        # 注意参数顺序的调整
        super().__init__(env, path_planner, traffic_manager, backbone_network)
        
        # 简化ECBS配置
        self.conflict_detection_interval = 15.0  # 增加检测间隔
        
        print("初始化简化版ECBS车辆调度器")


# 在OptimizedVehicleScheduler类中添加一些可能缺失的方法：

class OptimizedVehicleScheduler:
    """优化版车辆调度器 - 修复版本"""
    
    # ... 其他代码保持不变 ...
    
    def clear_all_data(self):
        """清除所有数据（重置时使用）"""
        self.tasks.clear()
        self.vehicle_states.clear()
        self.mission_templates.clear()
        self.active_assignments.clear()
        self.pending_tasks.clear()
        
        # 重置统计信息
        self.stats = {
            'total_tasks': 0,
            'completed_tasks': 0,
            'failed_tasks': 0,
            'average_completion_time': 0,
            'total_distance': 0,
            'backbone_utilization_rate': 0,
            'interface_efficiency': 0,
            'vehicle_utilization': {},
            'performance_trends': defaultdict(list),
            'optimization_calls': 0,
            'batch_planning_savings': 0
        }
        
        print("已清除所有车辆调度数据")
    
    def force_vehicle_idle(self, vehicle_id):
        """强制设置车辆为空闲状态"""
        if vehicle_id in self.vehicle_states:
            vehicle_state = self.vehicle_states[vehicle_id]
            vehicle_state.status = VehicleStatus.IDLE
            vehicle_state.current_task = None
            
            # 清空任务队列
            if vehicle_id in self.active_assignments:
                self.active_assignments[vehicle_id] = []
            
            # 同步到环境
            if vehicle_id in self.env.vehicles:
                self.env.vehicles[vehicle_id]['status'] = 'idle'
            
            # 释放交通管理器中的路径
            if self.traffic_manager:
                self.traffic_manager.release_vehicle_path(vehicle_id)
    
    def get_vehicle_task_progress(self, vehicle_id):
        """获取车辆任务进度"""
        if vehicle_id not in self.vehicle_states:
            return None
        
        vehicle_state = self.vehicle_states[vehicle_id]
        
        if not vehicle_state.current_task or vehicle_state.current_task not in self.tasks:
            return None
        
        task = self.tasks[vehicle_state.current_task]
        
        return {
            'task_id': task.task_id,
            'task_type': task.task_type,
            'progress': task.execution_progress,
            'status': task.status.value,
            'quality_score': task.quality_score
        }
    
    def cancel_vehicle_tasks(self, vehicle_id):
        """取消车辆的所有任务"""
        if vehicle_id not in self.vehicle_states:
            return False
        
        vehicle_state = self.vehicle_states[vehicle_id]
        
        # 取消当前任务
        if vehicle_state.current_task and vehicle_state.current_task in self.tasks:
            task = self.tasks[vehicle_state.current_task]
            task.status = TaskStatus.CANCELLED
            
            # 释放接口预约
            for interface_id in task.reserved_interfaces:
                if self.traffic_manager:
                    self.traffic_manager.interface_manager.release_interface(interface_id, vehicle_id)
        
        # 取消队列中的任务
        if vehicle_id in self.active_assignments:
            for task_id in self.active_assignments[vehicle_id]:
                if task_id in self.tasks:
                    self.tasks[task_id].status = TaskStatus.CANCELLED
            
            self.active_assignments[vehicle_id] = []
        
        # 重置车辆状态
        self.force_vehicle_idle(vehicle_id)
        
        return True
    
    def get_system_health_status(self):
        """获取系统健康状态"""
        total_vehicles = len(self.vehicle_states)
        active_vehicles = len([v for v in self.vehicle_states.values() 
                              if v.status != VehicleStatus.IDLE])
        
        total_tasks = len(self.tasks)
        active_tasks = len([t for t in self.tasks.values() 
                           if t.status == TaskStatus.IN_PROGRESS])
        completed_tasks = len([t for t in self.tasks.values() 
                              if t.status == TaskStatus.COMPLETED])
        
        return {
            'vehicles': {
                'total': total_vehicles,
                'active': active_vehicles,
                'idle': total_vehicles - active_vehicles,
                'utilization_rate': active_vehicles / max(1, total_vehicles)
            },
            'tasks': {
                'total': total_tasks,
                'active': active_tasks,
                'completed': completed_tasks,
                'completion_rate': completed_tasks / max(1, total_tasks)
            },
            'system_load': active_vehicles / max(1, total_vehicles),
            'avg_task_quality': sum(
                task.quality_score for task in self.tasks.values() 
                if task.status == TaskStatus.COMPLETED
            ) / max(1, completed_tasks)
        }


# 确保所有必要的导入都存在
import math
import heapq
import time
import threading
from typing import List, Dict, Tuple, Set, Optional, Any
from collections import defaultdict, deque
from dataclasses import dataclass, field
from concurrent.futures import ThreadPoolExecutor, as_completed
import numpy as np
from enum import Enum